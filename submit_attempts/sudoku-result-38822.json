{
    "tests": [
        {
            "description": "the solve method produces a valid solution.",
            "traceback": "Traceback (most recent call last):\n  File \"/home/vmuser_xlntcvgp/utils.py\", line 142, in func_wrapper\n    return func(self)\n  File \"run3.py\", line 93, in test_solve\n    values = solution.solve(grid.rstrip())\n  File \"/home/vmuser_xlntcvgp/workspace/solution.py\", line 193, in solve\n    values = search(values)\n  File \"/home/vmuser_xlntcvgp/workspace/solution.py\", line 182, in search\n    attempt = search(new_values)\n  File \"/home/vmuser_xlntcvgp/workspace/solution.py\", line 182, in search\n    attempt = search(new_values)\n  File \"/home/vmuser_xlntcvgp/workspace/solution.py\", line 182, in search\n    attempt = search(new_values)\n  [Previous line repeated 3 more times]\n  File \"/home/vmuser_xlntcvgp/workspace/solution.py\", line 173, in search\n    values = reduce_puzzle(values)\n  File \"/home/vmuser_xlntcvgp/workspace/solution.py\", line 158, in reduce_puzzle\n    values = naked_twins(values)\n  File \"/home/vmuser_xlntcvgp/workspace/solution.py\", line 142, in naked_twins\n    values[peer] = values[peer].replace(values[nt[0]][1], '')\nIndexError: string index out of range\n",
            "message": null,
            "advice": "Try your code on the following example:\n......9.....6.....3.........91.2..7....1.....5.....2.1......4..2..4..5...7.....1.\n",
            "result": "E",
            "rubric_item_id": "5530"
        },
        {
            "description": "the naked_twins method applies the 'naked twins' heuristic.",
            "traceback": "",
            "message": null,
            "advice": null,
            "result": ".",
            "rubric_item_id": "5531"
        },
        {
            "description": "the README has been modified.",
            "traceback": "",
            "message": null,
            "advice": null,
            "result": ".",
            "rubric_item_id": null
        }
    ]
}